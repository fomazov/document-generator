export namespace DocumentGenerator {
  const fs = require('fs');
  const PDFDocument = require('pdfkit');
  const moment = require('moment');

  const fontFamily: string = 'ArialUnicode';
  const boldFontFamily: string = 'ArialUnicode-Bold';

  export abstract class PDFDocumentGenerator {
    public abstract documentType(): PDFDocument;

    public initializePDFDocument(data): string {
      const dt = this.documentType();

      const doc = new PDFDocument({ size: 'A4', margin: 50 });
      doc.registerFont(
        'ArialUnicode',
        require('path').resolve(
          __dirname,
          '../../public/assets/fonts/ArialUnicode.ttf',
        ),
      );
      doc.registerFont(
        'ArialUnicode-Bold',
        require('path').resolve(
          __dirname,
          '../../public/assets/fonts/ArialUnicode-Bold.ttf',
        ),
      );

      return `PDFDocumentGenerator: ${dt.release(doc, data)}`;
    }
  }

  export class ConfirmationGenerator extends PDFDocumentGenerator {
    public documentType(): PDFDocument {
      return new Confirmation();
    }
  }

  export class InvoiceGenerator extends PDFDocumentGenerator {
    public documentType(): PDFDocument {
      return new Invoice();
    }
  }

  export class Confirmation implements PDFDocument {
    private generateHr({
      doc,
      y = 50,
      color = '#aaaaaa',
      lineWidth = 1,
      length = 550,
    }: HrInterface) {
      doc
        .strokeColor(color)
        .lineWidth(lineWidth)
        .moveTo(50, y)
        .lineTo(length, y)
        .stroke();
    }

    private generateHeader({ doc, hotelName }: HeaderInterface) {
      doc
        .font(boldFontFamily, 22)
        .fillColor('#444444')
        .text(hotelName, 50, 57)
        .fontSize(10)
        .text(moment(new Date()).format('MMM DD, YYYY'), 200, 62, {
          align: 'right',
        })
        .font(fontFamily, 15)
        .text('Online check in confirmation', 50, 85)
        .moveDown();

      this.generateHr({ doc, y: 110, color: '#2a8bf2', lineWidth: 4 });
    }

    private generateBookingInfo(
      doc,
      checkedInAt,
      checkedOutAt,
      yValue,
    ): BookingInfoInterface {
      let y = yValue;
      doc
        .fillColor('#444444')
        .fontSize(20)
        .font(boldFontFamily)
        .text('Booking information', 50, y);
      y += 30;

      this.generateHr({ doc, y });
      y += 15;

      doc
        .fontSize(10)
        .font(boldFontFamily)
        .text('Check in date', 50, y)
        .font(fontFamily)
        .text(moment(checkedInAt).format('MMM DD, YYYY'), 150, y);
      y += 15;

      doc
        .fontSize(10)
        .font(boldFontFamily)
        .text('Check out date', 50, y)
        .font(fontFamily)
        .text(moment(checkedOutAt).format('MMM DD, YYYY'), 150, y);

      y += 15;
      this.generateHr({ doc, y });
      y += 50;
    }

    private generatePhoto({ doc, documentPhoto }: PhotoInterface) {
      doc.image(documentPhoto, 50, 200, {
        fit: [500, 500],
        align: 'center',
        valign: 'center',
      });
    }

    private generateFooter({ doc }) {
      this.generateHr({ doc, y: 740 });
      doc
        .fontSize(10)
        .text(
          'This check-in form was generated by EasyWay Technologies LTD',
          50,
          760,
          { align: 'center', width: 500 },
        )
        .text('https://www.easyway.ai', 50, 775, {
          align: 'center',
          width: 500,
        });
    }

    public release(doc?, data?): any {
      const currentDate: String = moment(new Date()).format('MMDDYYYYHHmmSS');
      const documentName: string = `confirmation_${currentDate}.pdf`;
      const hotelName = data.hotel.namet;
      const checkedInAt = data.booking.checkedInAt;
      const checkedOutAt = data.booking.checkedOutAt;
      const documentPhoto: string = data.guest.documentPhoto;

      this.generateHeader({ doc, hotelName });
      this.generatePhoto({ doc, documentPhoto });

      this.generateBookingInfo(doc, checkedInAt, checkedOutAt, 160);

      this.generateFooter({ doc });

      doc.end();
      doc.pipe(fs.createWriteStream('./public/documents/' + documentName));

      return '{Result of the Confirmation}';
    }
  }

  export class Invoice implements PDFDocument {
    public release(doc?, data?): any {
      const documentName: string = 'invoice.pdf';
      const invoiceStub: String =
        'This is stub for futher creation other types of pdf documents';

      doc
        .font(boldFontFamily, 22)
        .fillColor('#444444')
        .text(invoiceStub, 50, 100);

      doc.end();
      doc.pipe(fs.createWriteStream('./public/documents/' + documentName));

      return '{Result of the Invoice. }';
    }
  }

  export interface PDFDocument {
    release(): any;
  }

  export interface HrInterface {
    doc: object;
    y: number;
    color?: string;
    lineWidth?: number;
    length?: number;
  }

  export interface HeaderInterface {
    doc: object;
    hotelName: string;
  }

  export interface BookingInfoInterface {
    doc: object;
    checkedInAt: string;
    checkedOutAt: string;
    yValue: number;
  }

  export interface PhotoInterface {
    doc: any;
    documentPhoto: string;
  }

  export function generatePDFDocument(
    generator: PDFDocumentGenerator,
    data?,
  ): void {
    console.log(generator.initializePDFDocument(data));
  }
}
