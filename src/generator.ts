import fs from 'fs';
import path from 'path';
import moment from 'moment';
import PDFDocument from 'pdfkit';
import { formData } from './typings';
import * as v from './validation';

type PDFDocument = typeof PDFDocument;

const fontFamilyName = 'ArialUnicode';
const fontFamilyPath = '../public/assets/fonts/ArialUnicode.ttf';
const boldFontFamilyName = 'ArialUnicode-Bold';
const boldFontFamilyPath = '../public/assets/fonts/ArialUnicode-Bold.ttf';
const arialUnicode = path.resolve(__dirname, fontFamilyPath);
const arialUnicodeBold = path.resolve(__dirname, boldFontFamilyPath);

const headerText = 'Online check in confirmation';
const footerText = 'This check-in form was generated by EasyWay Technologies LTD';
const companyWebsite = 'https://www.easyway.ai';

const generatePDFDocument = (
  generator: PDFDocumentGenerator,
  data?: formData,
): void => {
  console.log(generator.initializePDFDocument(data));
}

const writeToFile = ({file, directoryPath, finalMsg}: v.writeToFile) => {

  const strm = fs.createWriteStream(file);

  new Promise((resolve, reject) => {

    strm.on("finish", () => {
      console.log('Document was successfully created');
      return resolve(true);
    });

    strm.on("error", (e) => {
      return reject(e);
    });

  }).catch((error) => {

    console.log(error);

    if (!fs.existsSync(directoryPath)){
      fs.mkdirSync(directoryPath);
      console.log(`New directory >>> ${directoryPath} <<< was created`)
    }

    console.log('Please, restart application')

  })
    .then(() => console.log(finalMsg));

  return strm;
}

abstract class PDFDocumentGenerator {
  public abstract documentType(): v.General;

  public initializePDFDocument(data: formData): string {
    const dt = this.documentType();

    const doc = new PDFDocument({ size: 'A4', margin: 50 });
    doc.registerFont('ArialUnicode', arialUnicode);
    doc.registerFont('ArialUnicode-Bold', arialUnicodeBold);

    return `PDFDocumentGenerator: ${dt.release(doc, data)}`;
  }

}

class ConfirmationGenerator extends PDFDocumentGenerator {
  public documentType(): v.General {
    return new Confirmation();
  }
}

class InvoiceGenerator extends PDFDocumentGenerator {
  public documentType(): v.General {
    return new Invoice();
  }
}

class Confirmation implements v.General {

  private static generateHr({
    doc,
    y = 50,
    color = '#aaaaaa',
    lineWidth = 1,
    length = 550,
  }: v.Hr) {
    doc
      .strokeColor(color)
      .lineWidth(lineWidth)
      .moveTo(50, y)
      .lineTo(length, y)
      .stroke();
  }

  private static generateHeader({ doc, hotelName }: v.Header) {
    doc
      .font(boldFontFamilyName, null,22)
      .fillColor('#444444')
      .text(hotelName, 50, 57)
      .fontSize(10)
      .text(moment(new Date()).format('MMM DD, YYYY'), 200, 62, {
        align: 'right',
      })
      .font(fontFamilyName,null, 15)
      .text(headerText, 50, 85)
      .moveDown();

    Confirmation.generateHr({ doc, y: 110, color: '#2a8bf2', lineWidth: 4 });
  }

  private static generateBookingInfo({
    doc,
    checkedInAt,
    checkedOutAt,
    yValue,
  }: v.BookingInfo) {
    let y = yValue;
    doc
      .fillColor('#444444')
      .fontSize(20)
      .font(boldFontFamilyName)
      .text('Booking information', 50, y);
    y += 30;

    Confirmation.generateHr({ doc, y });
    y += 15;

    doc
      .fontSize(10)
      .font(boldFontFamilyName)
      .text('Check in date', 50, y)
      .font(fontFamilyName)
      .text(moment(checkedInAt).format('MMM DD, YYYY'), 150, y);
    y += 15;

    doc
      .fontSize(10)
      .font(boldFontFamilyName)
      .text('Check out date', 50, y)
      .font(fontFamilyName)
      .text(moment(checkedOutAt).format('MMM DD, YYYY'), 150, y);

    y += 15;
    Confirmation.generateHr({ doc, y });

  }

  private static generatePhoto({ doc, documentPhoto }: v.DocumentPhoto) {
    doc.image(documentPhoto, 50, 200, {
      fit: [500, 500],
      align: 'center',
      valign: 'center',
    });
  }

  private static generateFooter({ doc }) {
    Confirmation.generateHr({ doc, y: 740 });
    doc
      .fontSize(10)
      .text(footerText, 50, 760, { align: 'center', width: 500 })
      .text(companyWebsite, 50, 775, {
        align: 'center',
        width: 500,
      });
  }

  public release(doc?: PDFDocument, data?: formData) {
    const currentDate: string = moment(new Date()).format('MMDDYYYYHHmmSS');
    const documentName = `confirmation_${currentDate}.pdf`;
    const directoryPath = path.resolve(
      `${__dirname}/../public/documents/`,
    );
    const file = `${directoryPath}/${documentName}`;
    const hotelName = data.hotel.name;
    const { checkedInAt, checkedOutAt } = data.booking;
    const documentPhoto = data.guest.documentPhoto;
    const finalMsg = '{Result of the Confirmation class}';

    Confirmation.generateHeader({ doc, hotelName });
    Confirmation.generateBookingInfo({ doc, checkedInAt, checkedOutAt, yValue: 160 });
    Confirmation.generatePhoto({ doc, documentPhoto });
    Confirmation.generateFooter({ doc });

    doc.pipe(writeToFile({file, directoryPath, finalMsg}));
    doc.end();

    return '{Working with Confirmation class}';

  }
}

class Invoice implements v.General {
  public release(doc?: PDFDocument): string {
    const documentName = 'invoice.pdf';
    const directoryPath = path.resolve(
      `${__dirname}/../public/documents/`,
    );
    const file = `${directoryPath}/${documentName}`;
    const invoiceStub = 'This is stub for further creation other types of pdf documents';
    const finalMsg = '{Result of the Invoice class}';

    doc
      .font(boldFontFamilyName, null, 22)
      .fillColor('#444444')
      .text(invoiceStub, 50, 100);

    doc.pipe(writeToFile({file, directoryPath, finalMsg}));
    doc.end();

    return '{Working with Invoice class}';
  }
}
export class DocumentGenerator {
  public static generatePDFDocument = generatePDFDocument;
  public static ConfirmationGenerator = ConfirmationGenerator;
  public static InvoiceGenerator = InvoiceGenerator;
}
